using System.Diagnostics;
using System.Text;

namespace zentronC
{
    public class Compiler
    {
        bool isAutoDeclare = false;
        public void Compile(string output)
        {
            string strCmdText = $"/C gcc -Os -s -o {output} tmp.c";
            Process process = new Process();
            ProcessStartInfo startInfo = new ProcessStartInfo("CMD.exe", strCmdText);
            startInfo.RedirectStandardOutput = false;
            startInfo.UseShellExecute = false;
            startInfo.CreateNoWindow = false;
            process.StartInfo = startInfo;
            process.Start();
            process.WaitForExit();
            Console.WriteLine("Finished compilation.");
        }

        public void initCompiler()
        {
            string tmp = "tmp.c";
            File.WriteAllText(tmp, "");
            File.AppendAllText(tmp, "/* Generated by the Zentron compiler (Written by SuperTavor) */\n");
            File.AppendAllText(tmp, "#include <stdio.h>\n");
            File.AppendAllText(tmp, "#include <string.h>\n");
            File.AppendAllText(tmp, "#include <unistd.h>\n");
            File.AppendAllText(tmp, "#include <stdlib.h>\n");
            File.AppendAllText(tmp, "\nint tmp = 0;\n");
            File.AppendAllText(tmp, "\nchar conversionBuff[10000];\n");
            File.AppendAllText(tmp, "int main()\n");
            File.AppendAllText(tmp, "{\n");

        }
        public void closeCompiler()
        {
            File.AppendAllText("tmp.c", "\n}");
        }
        public void writeSleep(string[] statement)
        {
            File.AppendAllText("tmp.c", $"sleep({statement[1]});\n");
        }
        public void writeUntilBegin(string[] statement)
        {
            var parsed = ParseUntil(statement);
            var v1 = parsed[1];
            var v2 = parsed[3];
            if(v1.StartsWith("&"))
            {
                v1 = v1.Substring(1); 
            }
            else
            {
                v1 = $"\"{v1}\"";
            }
            if (v2.StartsWith("&"))
            {
                v2 = v2.Substring(1);
            }
            else
            {
                v2 = $"\"{v2}\"";
            }
            if (parsed[2] == ">")
            {
                File.AppendAllText("tmp.c", $"while (atoi({v1}) > atoi({v2}))\n");
                File.AppendAllText("tmp.c", "{\n");
            }
            else if (parsed[2] == "<")
            {
                File.AppendAllText("tmp.c", $"while (atoi({v1}) < atoi({v2}))\n");
                File.AppendAllText("tmp.c", "{\n");
            }
            else if (parsed[2] == "==")
            {
                File.AppendAllText("tmp.c", $"while (strcmp({v1},{v2}) == 0)\n");
                File.AppendAllText("tmp.c", "{\n");
            }
            else if (parsed[2] == "!=")
            {
                File.AppendAllText("tmp.c", $"while (strcmp({v1},{v2}) != 0)\n");
                File.AppendAllText("tmp.c", "{\n");
            }
        }
        public void writeLoop()
        {
            File.AppendAllText("tmp.c", "while(1)\n{\n");
        }
        private string[] ParseUntil(string[] statement)
        {
            var op = statement[2];
           
            if(op == "<")
            {
                op = ">";
            }
            else if (op == ">")
            {
                op = "<";
            }
            else if (op == "is")
            {
                op = "!=";
            }
            else if (op == "isnt")
            {
                op = "==";
            }
            else
            {
                throw new Exception("Invalid operator, cannot parse token");
            }
            statement[2] = op;
            return statement;
        }
        public void writeContinue()
        {
            File.AppendAllText("tmp.c", $"continue;\n");
        }
        public void writeBreak()
        {
            File.AppendAllText("tmp.c", $"break;\n");
        }
        public void writePrint(string[] statement)
        {
            string[] args = statement[1..^0];
            string valueToPrint = "";
            string tmp = "tmp.c";
            string literalIndicator = "";
            bool isNl = false;
            if (args[0] == "n")
            {
                isNl = true;
            }
            if (args[1].StartsWith("&"))
            {
                literalIndicator = "";
                valueToPrint = args[1].Substring(1);
            }
            else
            {
                valueToPrint = args[1];
                literalIndicator = "\"";
            }
            File.AppendAllText(tmp, $"printf(\"%s\",{literalIndicator + valueToPrint + literalIndicator});\n");
            if (isNl)
            {
                File.AppendAllText(tmp, $"printf(\"\\n\");\n");
            }

        }
        public void writePoint(string[] statement)
        {
            string[] args = statement[1..^0];
            File.AppendAllText("tmp.c", $"{args[0]}:\n");
        }
        public void writeGo(string[] statement)
        {
            string[] args = statement[1..^0];
            File.AppendAllText("tmp.c", $"goto {args[0]};\n");
        }
        public void writeIf(string[] statement)
        {
            string[] args = statement[1..^0];
            string mode = args[1];
            string tmp = "tmp.c";
            string v1 = args[0];
            string v2 = args[2];
            if(v1.StartsWith("&"))
            {
                v1 = v1.Substring(1);
            }
            else
            {
                v1 = $"\"{v1}\"";
            }
            if (v2.StartsWith("&"))
            {
                v2 = v2.Substring(1);
            }
            else
            {
                v2 = $"\"{v2}\"";
            }
            if (mode == "is")
            {
                File.AppendAllText(tmp, $"if(strcmp({v1},{v2}) == 0)\n");
            }
            else if (mode == "isnt")
            {
                File.AppendAllText(tmp, $"if(strcmp({v1},{v2}) != 0)\n");
            }
            else if (mode == "<")
            {
               
                File.AppendAllText(tmp, $"if(atoi({v1}) < atoi({v2}))");
            
            }
            else if (mode == ">")
            {
                File.AppendAllText(tmp, $"if(atoi({v1}) > atoi({v2}))");
     
            }
            else
            {
                throw new Exception("Invalid operator!!");
            }
            File.AppendAllText(tmp, "{\n");
        }
        public void writeReturnProg()
        {
            File.AppendAllText("tmp.c", "return 0;\n");
        }
        public void writeElseBegin()
        {
            File.AppendAllText("tmp.c", "else\n{\n");
        }
        public void writeEnd(string[] statement)
        {
            if(statement.Length == 1)
            {
                writeEndif();
            }
            else
            {
                throw new Exception("End recieves zero arguments!");
            }
        }
        public void writeEndif()
        {
            File.AppendAllText("tmp.c", "}\n");
        }
        public void writeDef(string[] statement)
        {
            string varname = statement[0];
            if (varname.EndsWith(";") && statement.Length == 1)
            {
                File.AppendAllText("tmp.c", $"char *{statement[0].Substring(0, statement[0].Length - 1)} = NULL;\n");
                return;
            }
            string initialValue = statement[2];
            //File.AppendAllText("tmp.c", "//" + Unsplit(statement,' ') + "\n");
            if (initialValue.StartsWith("&"))
            {
                initialValue = initialValue.Substring(1); 
            }
            else
            {
                initialValue = $"\"{initialValue}\"";
            }
            if(mainClass.createdVars.Contains(varname))
            {
                File.AppendAllText("tmp.c", $"{varname} = {initialValue};\n");
            }
            else
            {
                File.AppendAllText("tmp.c", $"char *{varname} = {initialValue};\n");
                mainClass.createdVars.Add(statement[0]);
            }
        }
        public string Unsplit(string[] arr,char delimiter)
        {
            StringBuilder sb = new StringBuilder();

            foreach (var item in arr)
            {
                sb.Append(item).Append(delimiter); 
            }

            return sb.ToString().TrimEnd(); 
        }

        public void writeSayEmptyLine()
        {
            var tmp = "tmp.c";
            File.AppendAllText(tmp, $"printf(\"\\n\");\n");
        }
        public void writeIn(string[] statement)
        {
            string[] args = statement[1..^0];
            string varname = args[1];
            string tmp = "tmp.c";
            if(isAutoDeclare)
            {
                if(!mainClass.createdVars.Contains(varname))
                {
                    File.AppendAllText(tmp, $"char *{varname} = (char *)malloc(1000);\n");
                }
            }
            File.AppendAllText(tmp, $"{varname} = (char *)malloc(1000);\r\n");
            File.AppendAllText(tmp, $"fgets({varname}, 1000, stdin);\n");
            File.AppendAllText(tmp, $"{varname}[strcspn({varname}, \"\\n\")] = '\\0';\n");
        }
        public void writeIncrementNum(string[] statement)
        {
            string[] args = statement.Skip(1).ToArray();
            string varname = args[0];
            string operationNum = args[2];
            File.AppendAllText("tmp.c", $"tmp = 0;\n");
            File.AppendAllText("tmp.c", $"tmp = atoi({varname});\n");
            File.AppendAllText("tmp.c", $"tmp += {operationNum};\n");
            File.AppendAllText("tmp.c", "memset(conversionBuff, 0, sizeof(conversionBuff));\r\n");
            File.AppendAllText("tmp.c", $"sprintf(conversionBuff,\"%d\",tmp);\n");
            File.AppendAllText("tmp.c", $"{varname} = conversionBuff;\n");
        }
        public void writeDecrementNum(string[] statement)
        {
            string[] args = statement.Skip(1).ToArray();
            string varname = args[0];
            string operationNum = args[2];
            File.AppendAllText("tmp.c", $"tmp = 0;\n");
            File.AppendAllText("tmp.c", $"tmp = atoi({varname});\n");
            File.AppendAllText("tmp.c", $"tmp -= {operationNum};\n");
            File.AppendAllText("tmp.c", "memset(conversionBuff, 0, sizeof(conversionBuff));\r\n");
            File.AppendAllText("tmp.c", $"sprintf(conversionBuff,\"%d\",tmp);\n");
            File.AppendAllText("tmp.c", $"{varname} = conversionBuff;\n");
        }
        public void writeRule(string[] statement)
        {
            if (statement[1].ToLower() == "auto-declare")
            {
                isAutoDeclare = true;
            }
            else
            {
                throw new Exception("Invalid rule.");
            }
        }
    }
}

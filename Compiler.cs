using System.Diagnostics;

namespace zentronC
{
    public class Compiler
    {
        private string UntilEndCurrent = "";
        bool isAutoDeclare = false;
        public void Compile(string output)
        {
            string strCmdText = $"/C gcc -Os -s -o {output} tmp.c";
            Process process = new Process();
            ProcessStartInfo startInfo = new ProcessStartInfo("CMD.exe", strCmdText);
            startInfo.RedirectStandardOutput = false;
            startInfo.UseShellExecute = false;
            startInfo.CreateNoWindow = false;
            process.StartInfo = startInfo;
            process.Start();
            process.WaitForExit();
            Console.WriteLine("Finished compilation.");
        }

        public void initCompiler()
        {
            string tmp = "tmp.c";
            File.WriteAllText(tmp, "");
            File.AppendAllText(tmp, "/* Generated by the Zentron compiler (Written by SuperTavor) */\n");
            File.AppendAllText(tmp, "#include <stdio.h>\n");
            File.AppendAllText(tmp, "#include <string.h>\n");
            File.AppendAllText(tmp, "#include <unistd.h>\n");
            File.AppendAllText(tmp, "#include <stdlib.h>\n");
            File.AppendAllText(tmp, "struct emustack\r\n{\r\n    char *varnames[1000];\r\n    char *values[1000];\r\n    int top;\r\n};\r\nstruct emustack stack;\r\nvoid push(const char *varname, const char *value)\r\n{\r\n    if (!isItemPresent(stack.varnames, varname))\r\n    {\r\n        stack.varnames[stack.top] = strdup(varname);\r\n        stack.values[stack.top] = strdup(value);\r\n        stack.top++;\r\n    }\r\n    else\r\n    {\r\n        stack.values[getIndex(varname)] = strdup(value);\r\n    }\r\n}\r\nchar *pull(char *varname)\r\n{\r\n    int index = 0;\r\n    for (int i = 0; i < 1000; i++)\r\n    {\r\n        if (strcmp(stack.varnames[i], varname) == 0)\r\n        {\r\n            index = i;\r\n            break;\r\n        }\r\n    }\r\n    return stack.values[index];\r\n}\r\nint isItemPresent(char *arr[], char *item)\r\n{\r\n    int n = 0;\r\n    while (arr[n] != NULL)\r\n    {\r\n        n++;\r\n    }\r\n\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        if (strcmp(arr[i], item) == 0)\r\n        {\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\nint getIndex(char *varname)\r\n{\r\n    int index = 0;\r\n    for (int i = 0; i < 1000; i++)\r\n    {\r\n        if (strcmp(stack.varnames[i], varname) == 0)\r\n        {\r\n            index = i;\r\n            break;\r\n        }\r\n    }\r\n    return index;\r\n}\r\nvoid set(char *varname, char *content)\r\n{\r\n    int index = getIndex(varname);\r\n    strcpy(stack.values[index], content);\r\n}");
            File.AppendAllText(tmp, "\nint tmp = 0;\n");
            File.AppendAllText(tmp, "\nchar conversionBuff[10000];\n");
            File.AppendAllText(tmp, "//Program Logic\n");
            File.AppendAllText(tmp, "int main()\n");
            File.AppendAllText(tmp, "{\n");

        }
        public void closeCompiler()
        {

            File.AppendAllText("tmp.c", "\n//Free memory from emulated stack\n\nfor (int i = 0; i < stack.top; i++)\n    {\n        free(stack.varnames[i]);\n        free(stack.values[i]);\n    }");
            File.AppendAllText("tmp.c", "\n}");
        }
        public void writeSleep(string[] statement)
        {
            File.AppendAllText("tmp.c", $"sleep({statement[1]});\n");
        }
        public void writeUntilBegin(string[] statement)
        {
            Random rnd = new Random();
            int UntilID = rnd.Next(1000000);
            string StartLabel = "UntilStart" + UntilID.ToString();
            File.AppendAllText("tmp.c", $"{StartLabel}:\n");
            UntilEndCurrent = "UntilEnd" + UntilID;
            string[] forif = {"If", statement[1], statement[2], statement[3],UntilEndCurrent};
            writeIf(forif);
            writeGo(new string[] { "jumptomark", UntilEndCurrent });
            writeEndif();
        }
        public void writeUntilEnd()
        {
            File.AppendAllText("tmp.c", $"goto UntilStart{UntilEndCurrent.Substring(8)};\n");
            File.AppendAllText("tmp.c",(UntilEndCurrent + ":\n"));
        }
        public void writeContinue()
        {
            File.AppendAllText("tmp.c", $"goto UntilStart{UntilEndCurrent.Substring(8)};\n");
        }
        public void writeBreak()
        {
            File.AppendAllText("tmp.c", $"goto {UntilEndCurrent};\n");
        }
        public void writePrint(string[] statement)
        {
            string[] args = statement[1..^0];
            string valueToPrint = "";
            string tmp = "tmp.c";
            string literalIndicator = "";
            bool isNl = false;
            if (args[0] == "n")
            {
                isNl = true;
            }
            if (args[1].StartsWith("&"))
            {
                literalIndicator = "";
                valueToPrint = $"pull(\"{args[1].Substring(1)}\")";
            }
            else
            {
                valueToPrint = args[1];
                literalIndicator = "\"";
            }
            File.AppendAllText(tmp, $"printf(\"%s\",{literalIndicator + valueToPrint + literalIndicator});\n");
            if (isNl)
            {
                File.AppendAllText(tmp, $"printf(\"\\n\");\n");
            }

        }
        public void writePoint(string[] statement)
        {
            string[] args = statement[1..^0];
            File.AppendAllText("tmp.c", $"{args[0]}:\n");
        }
        public void writeGo(string[] statement)
        {
            string[] args = statement[1..^0];
            File.AppendAllText("tmp.c", $"goto {args[0]};\n");
        }
        public void writeIf(string[] statement)
        {
            string[] args = statement[1..^0];
            string mode = args[1];
            string tmp = "tmp.c";
            string v1 = args[0];
            string v2 = args[2];
            if(v1.StartsWith("&"))
            {
                v1 = $"pull(\"{v1.Substring(1)}\")";
            }
            else
            {
                v1 = $"\"{v1}\"";
            }
            if (v2.StartsWith("&"))
            {
                v2 = $"pull(\"{v2.Substring(1)}\")";
            }
            else
            {
                v2 = $"\"{v2}\"";
            }
            if (mode == "=")
            {
                File.AppendAllText(tmp, $"if(strcmp({v1},{v2}) == 0)\n");
            }
            else if (mode == "<")
            {
               
                File.AppendAllText(tmp, $"if(atoi({v1}) < atoi({v2}))");
            
            }
            else if (mode == ">")
            {
                File.AppendAllText(tmp, $"if(atoi({v1}) > atoi({v2}))");
     
            }
            File.AppendAllText(tmp, "{\n");
        }
        public void writeReturnProg()
        {
            File.AppendAllText("tmp.c", "return 0;\n");
        }
        public void writeElseBegin()
        {
            File.AppendAllText("tmp.c", "else\n{\n");
        }
        public void writeEnd(string[] statement)
        {
            if(statement.Length == 1)
            {
                writeEndif();
            }
            else if (statement[1].ToLower() == "loop")
            {
                File.AppendAllText("tmp.c", $"goto UntilStart{UntilEndCurrent.Substring(8)};\n");
                File.AppendAllText("tmp.c", (UntilEndCurrent + ":\n"));
            }
        }
        public void writeEndif()
        {
            File.AppendAllText("tmp.c", "}\n");
        }
        public void writeDef(string[] statement)
        {
            if (statement[0].EndsWith(";"))
            {
                File.AppendAllText("tmp.c", $"push(\"{statement[0].Substring(0, statement[0].Length-1)}\", \"\");\n");
                return;
            }
            string varname = statement[0];
            string initialValue = statement[2];
            File.AppendAllText("tmp.c", $"\n");
            if (initialValue.StartsWith("&"))
            {
                File.AppendAllText("tmp.c", $"push(\"{varname}\", pull(\"{initialValue.Substring(1)}\"));\n");
                
            }
            else
            {
                File.AppendAllText("tmp.c", $"push(\"{varname}\", \"{initialValue}\");\n");
            }
            File.AppendAllText("tmp.c", $"stack.values[getIndex(\"{varname}\")][strcspn(stack.values[getIndex(\"{varname}\")], \"\\n\")] = '\\0';\r\n");
        }
        public void writeSayEmptyLine()
        {
            var tmp = "tmp.c";
            File.AppendAllText(tmp, $"printf(\"\\n\");\n");
        }
        public void writeIn(string[] statement)
        {
            string[] args = statement[1..^0];
            string varname = args[1];
            string tmp = "tmp.c";
            if(isAutoDeclare)
            {
                File.AppendAllText(tmp, $"push(\"{varname}\",\"\");\n");
            }
            File.AppendAllText(tmp, $"stack.values[getIndex(\"{varname}\")] = (char *)malloc(1000);\r\n");
            File.AppendAllText(tmp, $"fgets(stack.values[getIndex(\"{varname}\")], 1000, stdin);\n");
            File.AppendAllText(tmp, $"stack.values[getIndex(\"{varname}\")][strcspn(stack.values[getIndex(\"{varname}\")], \"\\n\")] = '\\0';\n");
        }
        public void writeIncrementNum(string[] statement)
        {
            string[] args = statement.Skip(1).ToArray();
            string varname = args[0];
            string operationNum = args[2];
            File.AppendAllText("tmp.c", $"tmp = 0;\n");
            File.AppendAllText("tmp.c", $"tmp = atoi(pull(\"{varname}\"));\n");
            File.AppendAllText("tmp.c", $"tmp += {operationNum};\n");
            File.AppendAllText("tmp.c", "memset(conversionBuff, 0, sizeof(conversionBuff));\r\n");
            File.AppendAllText("tmp.c", $"sprintf(conversionBuff,\"%d\",tmp);\n");
            File.AppendAllText("tmp.c", $"set(\"{varname}\",conversionBuff);\n");
        }
        public void writeDecrementNum(string[] statement)
        {
            string[] args = statement.Skip(1).ToArray();
            string varname = args[0];
            string operationNum = args[2];
            File.AppendAllText("tmp.c", $"tmp = 0;\n");
            File.AppendAllText("tmp.c", $"tmp = atoi(pull(\"{varname}\"));\n");
            File.AppendAllText("tmp.c", $"tmp -= {operationNum};\n");
            File.AppendAllText("tmp.c", "memset(conversionBuff, 0, sizeof(conversionBuff));\r\n");
            File.AppendAllText("tmp.c", $"sprintf(conversionBuff,\"%d\",tmp);\n");
            File.AppendAllText("tmp.c", $"set(\"{varname}\",conversionBuff);\n");
        }
        public void writeRule(string[] statement)
        {
            if (statement[1].ToLower() == "auto-declare")
            {
                isAutoDeclare = true;
            }
        }
    }
}
